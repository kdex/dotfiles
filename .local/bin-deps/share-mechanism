#!/bin/bash
set -e
WRONG_ARGUMENTS=1
REVOCATION_FILE_NOT_FOUND=2
MISSING_DEPENDENCIES=3
MISSING_CONFIGURATION=4
CONFIGURATION_DIRECTORY="$HOME/.config/upload"
UPLOAD_RC="$CONFIGURATION_DIRECTORY/uploadrc"
CACHED_TRANSFER_MODE="$CONFIGURATION_DIRECTORY/upload.transfer-mode"
FILENAME="$1"
SHARED_WITH="$2"
DEPENDENCIES=(ssh rsync pv lftp)
if [[ -z "$SHARED_WITH" ]]; then
	SHARED_WITH="$SSH_DEFAULT_DIRECTORY"
fi
function err {
	>&2 echo $@
}
function setTransferMode {
	# We rely on the `ssh` command exiting with an arbitrary exit code
	# A user might access the server via ssh or sftp. Let's determine and cache this transfer mode for future use.
	set +e
	ssh "$SSH_HOST" exit > /dev/null 2>&1
	if [[ $? == 0 ]]; then
		# We can use ssh.
		echo "ssh" > "$CACHED_TRANSFER_MODE"
	else
		# Let's try lftp.
		lftp -c "open sftp://$SSH_HOST; bye" > /dev/null 2>&1
		if [[ $? == 0 ]]; then
			# We can use sftp.
			echo "sftp" > "$CACHED_TRANSFER_MODE"
		else
			err "Unable to determine transfer mode: Please check your ssh/sftp settings."
			exit 1
		fi
	fi
	set -e
}
function try {
	local COMMAND=$1
	if hash $COMMAND 2>/dev/null; then
		$COMMAND "${@:2}"
	fi
}
function getSuccessStatus {
	local SYMBOL=$2
	if [[ $SYMBOL == REVOKE ]]; then
		echo "Revocation successful"
	elif [[ $SYMBOL == UPLOAD ]]; then
		echo "Upload successful"
	fi
}
function getFailStatus {
	local SYMBOL=$2
	if [[ $SYMBOL == REVOKE ]]; then
		echo "Revocation failed"
	elif [[ $SYMBOL == UPLOAD ]]; then
		echo "Upload failed"
	fi
}
function getSuccessMessage {
	local FILE="$1"
	local SYMBOL=$2
	if [[ $SYMBOL == REVOKE ]]; then
		echo "Access to \"$FILE\" has been revoked successfully."
	elif [[ $SYMBOL == UPLOAD ]]; then
		echo "\"$FILE\" has been uploaded successfully."
	fi
}
function getFailMessage {
	local FILE="$1"
	local SYMBOL=$2
	if [[ $SYMBOL == REVOKE ]]; then
		echo "\"$FILE\" does not exist."
	elif [[ $SYMBOL == "UPLOAD" ]]; then
		echo "Error uploading \"$FILE\"."
	fi
}
function showSuccess {
	local FILE="$1"
	local SYMBOL=$2
	local URL="https://$DOMAIN/$SHARED_WITH/$FILE"
	if [[ ! -z $DISPLAY ]]; then
		try notify-send "$(getSuccessStatus "$@")" "$(getSuccessMessage "$@")" --icon=state-ok
		if [[ $SYMBOL == UPLOAD ]]; then
			try printf "$URL" | xclip -selection c
		fi
	else
		err "$(getSuccessStatus "$@"): "$URL""
	fi
}
function showFail {
	if [[ ! -z $DISPLAY ]]; then
		try notify-send "$(getFailStatus "$@")" "$(getFailMessage "$@")" --icon=state-error
	else
		err "$(getFailStatus "$@")"
	fi
}
function checkFilename {
	if [[ -z "$FILENAME" ]]; then
		err "Usage: $(basename "$0") <FILENAME> [WHO]"
		exit $WRONG_ARGUMENTS
	fi
}
for dependency in "${DEPENDENCIES[@]}"; do
	command -v $dependency >/dev/null 2>&1 || {
		err "Error running $(basename $0): The $dependency command is not installed."
		exit $MISSING_DEPENDENCIES
	}
done
mkdir -p "$CONFIGURATION_DIRECTORY" > /dev/null 2>&1
if [[ -f "$UPLOAD_RC" ]]; then
	source $UPLOAD_RC
fi
# Check rc variables
RC_VARIABLES=(SSH_HOST SSH_SHARED_DIRECTORY SSH_DEFAULT_DIRECTORY DOMAIN)
for v in ${RC_VARIABLES[@]}; do
	if [[ -z "${!v}" ]]; then
		err "\$${v} is unset. Please set this variable in $UPLOAD_RC."
		exit $MISSING_CONFIGURATION
	fi
done
if [[ ! -f "$CACHED_TRANSFER_MODE" ]]; then
	setTransferMode
fi
TRANSFER_MODE="$(cat $CACHED_TRANSFER_MODE)"